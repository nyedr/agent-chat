import type { Learning } from "./modules/insight-generator"; // Assuming path

/**
 * Configuration for the deep research workflow
 */
export interface WorkflowConfig {
  /**
   * Maximum depth of research iterations
   */
  maxDepth: number;

  /**
   * Maximum tokens to use for context
   */
  maxTokens: number;

  /**
   * Optional timeout in milliseconds
   */
  timeout?: number;

  /**
   * Optional limit on concurrent operations
   */
  concurrencyLimit?: number;
}

/**
 * Verification result from fact checking
 */
export interface VerificationResult {
  /**
   * Whether the answer is factually correct
   */
  isCorrect: boolean;

  /**
   * Optional explanation for the verification result
   */
  explanation?: string;

  /**
   * Optional corrected or enhanced answer
   */
  finalAnswer?: string;

  /**
   * Optional citations for the answer
   */
  citations?: Record<string, string>;
}

// Define ReportType (can be refined later)
export enum ReportType {
  RESEARCH_REPORT = "research_report",
  RESOURCE_REPORT = "resource_report",
  OUTLINE_REPORT = "outline_report",
}

export interface ResearchOptions {
  rerankerConfig?: any;
  reportType?: ReportType;
  sources?: any[];
  maxIterations?: number;
  researchDepth?: "basic" | "comprehensive";
  extract_top_k_chunks?: number;
  objectives?: string[];
  deliverables?: string[];
}

export interface ResearchAdapter {
  // ... existing code ...
}

export interface ReportPlanSection {
  title: string; // Section Title
  key_question: string; // Key question this section aims to answer
  // Optional: Add description if needed from LLM later
}

export interface ReportPlan {
  report_title: string;
  report_outline: ReportPlanSection[];
  // Optional: Add background_context string if generated by planner
}

// Define the structure for a knowledge gap with priority info
export interface Gap {
  text: string; // The description of the knowledge gap
  severity: 1 | 2 | 3; // How critical is this gap? (1: Low, 2: Medium, 3: High/Critical)
  confidence: number; // Confidence (0-1) that further search *can* resolve this gap
  priority?: number; // Calculated priority score (optional, added later)
}

// Add Gap Analysis Result Type
export interface GapAnalysisResult {
  is_complete: boolean;
  remaining_gaps: Gap[]; // Now an array of Gap objects
}

// Define and export ResearchLogEntry here
export interface ResearchLogEntry {
  type:
    | "plan"
    | "search"
    | "scrape"
    | "vectorize"
    | "analyze"
    | "reasoning"
    | "synthesis"
    | "thought";
  status: "pending" | "complete" | "error" | "warning";
  message: string;
  timestamp: string;
  depth?: number;
}

/**
 * Represents the internal state of the research process.
 */
export interface ResearchState {
  allSources: Record<string, string>;
  allLearnings: Learning[];
  currentDepth: number;
  maxDepth: number;
  completedSteps: number;
  totalSteps: number;
  shouldContinue: boolean;
  researchQueue: Gap[];
  originalQuery: string;
  reportPlan: ReportPlan | null;
  objectives: string[];
  deliverables: string[];
}
